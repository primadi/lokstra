###############################################
# LOKSTRA MULTI-DEPLOYMENT TESTING
###############################################
#
# This file demonstrates testing the same API
# in different deployment configurations:
#
# DEPLOYMENT 1: MONOLITH (1 server on port 3003)
#    - All services in one server process
#    - Run: go run main.go -server monolith
#
# DEPLOYMENT 2: MICROSERVICES (2 servers on ports 3004, 3005)
#    - User-service server: port 3004
#    - Order-service server: port 3005
#    - Run user-service: go run main.go -server user-service
#    - Run order-service: go run main.go -server order-service
#
###############################################

###############################################
# DEPLOYMENT 1: MONOLITH (Port 3003)
###############################################

### 1.1 List all users (monolith)
GET http://localhost:3003/users
Content-Type: application/json

### 1.2 Get specific user (monolith)
GET http://localhost:3003/users/1
Content-Type: application/json

### 1.3 Get order with user info (monolith - cross-service call)
# This demonstrates OrderService calling UserService
# In monolith: Direct method call within same server
GET http://localhost:3003/orders/1
Content-Type: application/json

### 1.4 Get orders by user (monolith)
GET http://localhost:3003/users/1/orders
Content-Type: application/json

### 1.5 Get non-existent orders by user (monolith)
GET http://localhost:3003/users/999/orders
Content-Type: application/json

### 1.6 Get non-existent user (monolith - error handling)
GET http://localhost:3003/users/999
Content-Type: application/json


###############################################
# DEPLOYMENT 2: USER-SERVER (Port 3004)
###############################################

### 2.1 List all users (user-service)
GET http://localhost:3004/users
Content-Type: application/json

### 2.2 Get user Alice
GET http://localhost:3004/users/1
Content-Type: application/json

### 2.3 Get user Bob
GET http://localhost:3004/users/2
Content-Type: application/json

### 2.4 Get non-existent user (user-service - error)
GET http://localhost:3004/users/999
Content-Type: application/json

###############################################
# DEPLOYMENT 2: ORDER-SERVER (Port 3005)
###############################################

### 3.1 Get order with user info (microservices - cross-service call)
# OrderService calls UserService to get user data
# In microservices: Could be HTTP call to user-service server (port 3004)
GET http://localhost:3005/orders/1
Content-Type: application/json

### 3.2 Get order 2 (Alice's mouse)
GET http://localhost:3005/orders/2
Content-Type: application/json

### 3.3 Get order 3 (Bob's keyboard)
GET http://localhost:3005/orders/3
Content-Type: application/json

### 3.4 Get Alice's orders
GET http://localhost:3005/users/1/orders
Content-Type: application/json

### 3.5 Get Bob's orders
GET http://localhost:3005/users/2/orders
Content-Type: application/json

### 3.6 Get non-existent order (order-service - error)
GET http://localhost:3005/orders/999
Content-Type: application/json

### 3.7 Get orders for non-existent user (error)
GET http://localhost:3005/users/999/orders
Content-Type: application/json

###############################################
# PART 4: COMPARISON TESTS
###############################################
# Run the same request on both deployment options
# to verify identical behavior
###############################################

### 4.1a Get user/1 from MONOLITH
GET http://localhost:3003/users/1

### 4.1b Get user/1 from USER-SERVICE SERVER
GET http://localhost:3004/users/1

# ➜ Both should return identical responses

### 4.2a Get order/1 from MONOLITH
GET http://localhost:3003/orders/1

### 4.2b Get order/1 from ORDER-SERVICE SERVER
GET http://localhost:3005/orders/1

# ➜ Both should return identical responses with user data

### 4.3a Get Alice's orders from MONOLITH
GET http://localhost:3003/users/1/orders

### 4.3b Get Alice's orders from ORDER-SERVICE SERVER
GET http://localhost:3005/users/1/orders

# ➜ Both should return identical order lists

### 4.4a Get non-existent user orders from MONOLITH
GET http://localhost:3003/users/99/orders

### 4.4b Get non-existent user orders from ORDER-SERVICE SERVER
GET http://localhost:3005/users/99/orders

# ➜ Both should return identical order lists

### 4.5a Get non-existent order (order-service - error)
GET http://localhost:3003/orders/999
Content-Type: application/json

### 4.5b Get non-existent order (order-service - error)
GET http://localhost:3005/orders/999
Content-Type: application/json

###############################################
# PART 5: COMPLETE FLOW TEST
###############################################

### 5.1 MONOLITH DEPLOYMENT - Complete flow
# 1. Get all users
GET http://localhost:3003/users

# 2. Get Alice's details
GET http://localhost:3003/users/1

# 3. Get Alice's orders
GET http://localhost:3003/users/1/orders

# 4. Get order details with user info
GET http://localhost:3003/orders/1

### 5.2 MICROSERVICES DEPLOYMENT - Complete flow
# 1. Get all users (from user-service server)
GET http://localhost:3004/users

# 2. Get Alice's details (from user-service server)
GET http://localhost:3004/users/1

# 3. Get Alice's orders (from order-service server)
GET http://localhost:3005/users/1/orders

# 4. Get order details with user info (from order-service server)
GET http://localhost:3005/orders/1

###############################################
# TESTING NOTES
###############################################
#
# DEPLOYMENT 1: MONOLITH
# ✅ Single server process on port 3003
# ✅ All endpoints available
# ✅ Fast (no network calls between services)
# ✅ Shared database
# ✅ Direct method calls between services
#
# DEPLOYMENT 2: MICROSERVICES
# ✅ User-service server on port 3004
# ✅ Order-service server on port 3005
# ✅ Servers run independently
# ✅ Cross-service calls (currently direct, could be HTTP)
# ✅ Each server can scale independently
#
# KEY OBSERVATIONS:
# 1. Same API, different ports
# 2. Identical responses in both deployments
# 3. OrderService depends on UserService (see orders/1)
# 4. Error handling works the same way
# 5. Server isolation in microservices deployment
#
###############################################

###############################################
# EXPECTED RESPONSES
###############################################

# GET /users
# {
#   "code": 200,
#   "status": "success",
#   "data": [
#     {"id": 1, "name": "Alice", "email": "alice@example.com"},
#     {"id": 2, "name": "Bob", "email": "bob@example.com"}
#   ]
# }

# GET /orders/1 (with cross-service call)
# {
#   "code": 200,
#   "status": "success",
#   "data": {
#     "order": {
#       "id": 1,
#       "user_id": 1,
#       "product": "Laptop",
#       "amount": 1200
#     },
#     "user": {
#       "id": 1,
#       "name": "Alice",
#       "email": "alice@example.com"
#     }
#   }
# }

# GET /users/1/orders
# {
#   "code": 200,
#   "status": "success",
#   "data": [
#     {"id": 1, "user_id": 1, "product": "Laptop", "amount": 1200},
#     {"id": 2, "user_id": 1, "product": "Mouse", "amount": 25}
#   ]
# }

# GET /users/999 (error)
# {
#   "status": "error",
#   "error": {
#     "code": "NOT_FOUND",
#     "message": "user not found"
#   }
# }
