# yaml-language-server: $schema=../../../../core/deploy/schema/lokstra.schema.json
# ========================================
# Multi-Deployment Configuration
# ========================================
#
# This single config defines 3 different deployments:
#   1. monolith     - All services in one process (dev/small apps)
#   2. user-service - Only user endpoints (microservices)
#   3. order-service - Only order endpoints (microservices)
#

# ========================================
# Service Definitions (Global) - MAP format
# ========================================
# Clean Architecture Layers:
#   - Repository: Data access (infrastructure)
#   - Service: Business logic (application)
#   - Contract: Interfaces & DTOs (application)
#   - Model: Domain entities (domain)

service-definitions:
  # Infrastructure layer - Repositories
  user-repository:
    type: user-repository-factory

  order-repository:
    type: order-repository-factory

  # Application layer - Services
  user-service:
    type: user-service-factory
    depends-on:
      - user-repository

  order-service:
    type: order-service-factory
    depends-on:
      - order-repository
      - user-service  # Can be local OR remote

# ========================================
# Router Definitions (Optional Overrides)
# ========================================
# Auto-routers are generated from published-services using metadata
# from XXXRemote service structs (primary source).
# 
# You can override here ONLY if you need deployment-specific customization:
#   - Different resource names per deployment
#   - Different conventions per environment
#   - Additional route overrides not in code
#
# routers:
#   user-service-router:
#     service: user-service
#     # Metadata already in UserServiceRemote, no override needed
#
#   order-service-router:
#     service: order-service  
#     # Metadata + custom routes already in OrderServiceRemote, no override needed
#
# router-overrides:
#   order-api-overrides:
#     # Custom routes already in OrderServiceRemote.Override, no override needed

# ========================================
# Deployments - MAP format
# ========================================
# Remote services are AUTO-RESOLVED from published-services!
# No need for remote-service-definitions - URLs are discovered automatically.
#
# Example: If user-service is published at user-server:3004,
# then required-remote-services: [user-service] will automatically
# resolve to http://localhost:3004
#
# SHORTHAND SYNTAX (1 server = 1 app):
# You can use addr/services/remote-services/routers/published-services
# directly at server level. These create a new app and prepend it to apps array.
# This allows mixing shorthand with additional explicit apps.
#
# Optional: You can still define external-service-definitions for:
#   - External services (outside this config)
#   - Override resource metadata per deployment

deployments:
  # ========================================
  # MONOLITH: All services in one process
  # ========================================
  monolith:
    servers:
      api-server:
        base-url: "http://localhost"
        # Infrastructure services (repositories)
        required-services:
          - user-repository
          - order-repository
        # Shorthand syntax (1 server = 1 app)
        addr: ":3003"
        published-services:
          - user-service
          - order-service

  # ========================================
  # MICROSERVICE: each service in its own process 
  # ========================================
  microservice:
    servers:
      user-server:
        base-url: "http://localhost"
        required-services:
          - user-repository
        # Shorthand syntax
        addr: ":3004"
        published-services:
          - user-service

      order-server:
        base-url: "http://localhost"
        required-services:
          - order-repository
        required-remote-services:
          - user-service
        # Shorthand syntax
        addr: ":3005"
        published-services:
          - order-service
