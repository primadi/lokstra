package lokstra_registry manages Dependency Injection registry for :
 - router
 - service factory
 - service
 - middleware

Available funcs :

router:
// Register a router with a name.
// If a router with the same name already exists, 
// and the RegisterOption allowOverride is not set to true, it will panic.
func RegisterRouter(name string, r router.Router, opts ...RegisterOption) 

// Retrieve a router by name.
// If the router does not exist, it returns nil.
func GetRouter(name string) router.Router

service factory:
// Registers a service factory function for a given service type.
// If the service type is already registered
// and the RegisterOption allowOverride is not set to true, it will panic.
func RegisterServiceFactory(serviceType string, factory ServiceFactory,
	opts ...RegisterOption)

// Retrieves a registered service factory function by service type.
func GetServiceFactory(serviceType string) ServiceFactory

service:
// Registers a service instance with a given name.
// If the same service name already exists,
// and the RegisterOption allowOverride is not set to true, it will panic.
func RegisterService(svcName string, svcInstance any, opts ...RegisterOption)

// Registers a lazy service configuration with a given name.
// The actual service instance will be created when first requested via LazyGetService.
// If the same lazy service name already exists,
// and the RegisterOption allowOverride is not set to true, it will panic.
func RegisterLazyService(svcName string, svcType string,
	config map[string]any, opts ...RegisterOption)

// Tries to resolve a service from the registry and assign it to current.
//
// If current is already set (non-nil), it will be returned as is.
// Otherwise, it will attempt to get from registry and set it.
// If current is nil and not found in registry, it tries to create from lazy config if exists.
// If fail to create, it will panic.
// It will panic if the type in registry does not match T.
func GetService[T comparable](name string, current T) T

// Tries to resolve a service from the registry.
//
// If current != nil, it will be returned immediately with ok=true.
// If current is nil and found in registry with correct type, it will be returned with ok=true.
// If not found or type mismatch, it tries to create from lazy config if exists.
// If still not found, it returns zero value of T with ok=false.
func TryGetService[T comparable](svcName string, current T) (T, bool)

// Create a new service using registered factory, register it, and return it.
// If factory not found or creation failed, return zero value of T.
// It will panic if the created service type does not match T or if
// a service with the same name already exists, unless
// the RegisterOption allowOverride is set to true.
func NewService[T any](svcName, svcType string, config map[string]any,
	opts ...RegisterOption) T 