# yaml-language-server: $schema=https://lokstra.dev/schema/lokstra.json

# =============================================================================
# LAYERED SERVICES (NEW PATTERN)
# =============================================================================
# Services are grouped by architectural layers with explicit dependencies.
# Dependencies are EXPLICIT - visible in config with validation.
#
# Run with: go run . layered

configs:
  - name: server-name
    value: ${SERVER_NAME:ecommerce-server}
  
  - name: app-env
    value: ${APP_ENV:development}
  
  - name: app-version
    value: ${APP_VERSION:1.0.0}

# =============================================================================
# SERVICES - Layered with Explicit Dependencies
# =============================================================================
services:
  # ============================================================================
  # LAYER 1: INFRASTRUCTURE
  # ============================================================================
  # Foundation services with no internal dependencies.
  # Provides: databases, caches, external APIs, messaging
  
  infrastructure:
    - name: db-service
      type: db
      config:
        host: ${DB_HOST:localhost}
        port: ${DB_PORT:5432}
        database: ${DB_NAME:ecommerce}
        username: ${DB_USER:postgres}
        password: ${DB_PASSWORD:postgres}

    - name: cache-service
      type: cache
      config:
        host: ${REDIS_HOST:localhost}
        port: ${REDIS_PORT:6379}
        db: ${REDIS_DB:0}

    - name: email-service
      type: email
      config:
        smtp_host: ${SMTP_HOST:smtp.gmail.com}
        smtp_port: ${SMTP_PORT:587}
        from: ${EMAIL_FROM:noreply@ecommerce.dev}
        username: ${SMTP_USER:}
        password: ${SMTP_PASSWORD:}

  # ============================================================================
  # LAYER 2: REPOSITORY (DATA ACCESS)
  # ============================================================================
  # Data access layer - depends only on infrastructure services.
  # Provides: CRUD operations, queries, data persistence
  
  repository:
    - name: user-repository
      type: user-repo
      depends-on: [db-service]  # ✅ Explicit dependency declaration
      config:
        db_service: db-service  # Injected as GenericLazyService

    - name: product-repository
      type: product-repo
      depends-on: [db-service, cache-service]  # ✅ Multiple dependencies
      config:
        db_service: db-service         # Validated: must be in depends-on
        cache_service: cache-service   # Validated: must be in depends-on

    - name: order-repository
      type: order-repo
      depends-on: [db-service]
      config:
        db_service: db-service

  # ============================================================================
  # LAYER 3: DOMAIN (BUSINESS LOGIC)
  # ============================================================================
  # Business logic layer - depends on repositories and infrastructure.
  # Provides: business rules, workflows, orchestration
  
  domain:
    - name: user-service
      type: user
      depends-on: [user-repository]  # ✅ Explicit dependency on repo
      config:
        repository_service: user-repository
        password_min_length: ${PASSWORD_MIN_LENGTH:8}

    - name: product-service
      type: product
      depends-on: [product-repository]
      config:
        repository_service: product-repository
        default_currency: ${DEFAULT_CURRENCY:USD}

  # ============================================================================
  # LAYER 4: ORCHESTRATION (COMPLEX BUSINESS LOGIC)
  # ============================================================================
  # Orchestration layer - combines multiple domain services.
  # Can depend on domain services and infrastructure.
  
  orchestration:
    - name: order-service
      type: order
      depends-on:  # ✅ All dependencies listed explicitly
        - order-repository      # Layer 2: repository
        - product-service       # Layer 3: domain service
        - user-service          # Layer 3: domain service
        - email-service         # Layer 1: infrastructure (allowed from any layer)
      config:
        repository_service: order-repository
        product_service: product-service
        user_service: user-service
        email_service: email-service
        tax_rate: ${TAX_RATE:0.10}
        min_order_amount: ${MIN_ORDER_AMOUNT:10.00}

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
servers:
  - name: ecommerce-server
    baseUrl: ${BASE_URL:http://localhost}
    apps:
      - addr: ":8080"
        routers: [product-api, order-api, user-api, health-api]

# =============================================================================
# BENEFITS OF LAYERED SERVICES
# =============================================================================
# ✅ ARCHITECTURE VISIBILITY
#    - Clear layer structure visible in config
#    - Easy to understand service dependencies
#    - Documentation built into configuration
#
# ✅ VALIDATION AT LOAD TIME
#    - depends-on must reference existing services
#    - depends-on can only reference previous layers
#    - All depends-on must be used in config
#    - All config service refs must be in depends-on
#
# ✅ GENERIC LAZY[T] PATTERN
#    - Type-safe dependency injection
#    - No manual caching logic needed
#    - Automatic lazy loading with sync.Once
#    - 80% less boilerplate code
#
# ✅ EXPLICIT DEPENDENCY GRAPH
#    Dependency tree (EXPLICIT - automatically validated):
#    
#    order-service (orchestration - layer 4)
#    ├─→ order-repository (repository - layer 2) → db-service (infra - layer 1)
#    ├─→ product-service (domain - layer 3) → product-repository (repository - layer 2)
#    │                                         ├─→ db-service (infra - layer 1)
#    │                                         └─→ cache-service (infra - layer 1)
#    ├─→ user-service (domain - layer 3) → user-repository (repository - layer 2)
#    │                                      └─→ db-service (infra - layer 1)
#    └─→ email-service (infra - layer 1)
#
# =============================================================================
# VALIDATION EXAMPLES
# =============================================================================
# ❌ This would FAIL validation:
#
# repository:
#   - name: user-repository
#     depends-on: [user-service]  # ERROR: user-service is in LATER layer
#
# ❌ This would FAIL validation:
#
# repository:
#   - name: product-repository
#     depends-on: [db-service, cache-service]  # Lists cache
#     config:
#       db_service: db-service  # But only uses db, not cache
#       # ERROR: cache-service in depends-on but not used in config
#
# ❌ This would FAIL validation:
#
# repository:
#   - name: product-repository
#     depends-on: [db-service]  # Lists only db
#     config:
#       db_service: db-service
#       cache_service: cache-service  # Uses cache but not in depends-on
#       # ERROR: cache-service used but not in depends-on
