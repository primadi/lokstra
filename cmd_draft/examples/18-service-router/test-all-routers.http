### ============================================================================
### Service Router Comparison - Testing All Three Routers
### ============================================================================
### This file tests all three router approaches:
### 1. Manual Router (/api/v1/manual) - Traditional manual route registration
### 2. Service Router (/api/v1/auto) - Auto-generated convention-based routing
### 3. Pattern Router (/api/v2/patterns) - Demonstrating 7 handler patterns
### ============================================================================

@baseUrl = http://localhost:3000

### ============================================================================
### 1. MANUAL ROUTER - Traditional Approach
### ============================================================================

### List all users (Manual Router)
GET {{baseUrl}}/api/v1/manual/users

### Get user by ID (Manual Router)
GET {{baseUrl}}/api/v1/manual/users/1

### Create new user (Manual Router)
POST {{baseUrl}}/api/v1/manual/users
Content-Type: application/json

{
  "name": "Alice Johnson",
  "email": "alice@example.com"
}

### Update user (Manual Router)
PUT {{baseUrl}}/api/v1/manual/users/1
Content-Type: application/json

{
  "name": "John Doe Updated",
  "email": "john.updated@example.com"
}

### Delete user (Manual Router)
DELETE {{baseUrl}}/api/v1/manual/users/1

### Search users (Manual Router)
GET {{baseUrl}}/api/v1/manual/users/search?q=john

### ============================================================================
### 2. SERVICE ROUTER - Auto-Generated Convention-Based
### ============================================================================

### List all users (Service Router)
GET {{baseUrl}}/api/v1/auto/users

### Get user by ID (Service Router)
GET {{baseUrl}}/api/v1/auto/users/1

### Create new user (Service Router)
POST {{baseUrl}}/api/v1/auto/users
Content-Type: application/json

{
  "name": "Bob Smith",
  "email": "bob@example.com"
}

### Update user (Service Router)
PUT {{baseUrl}}/api/v1/auto/users/2
Content-Type: application/json

{
  "name": "Jane Smith Updated",
  "email": "jane.updated@example.com"
}

### Delete user (Service Router)
DELETE {{baseUrl}}/api/v1/auto/users/2

### Search users (Service Router)
GET {{baseUrl}}/api/v1/auto/users/search?q=jane

### ============================================================================
### 3. PATTERN ROUTER - 7 Handler Patterns Demo
### ============================================================================

### Pattern 1: func(ctx *request.Context) error
### Manual control - handler writes response directly
GET {{baseUrl}}/api/v2/patterns/products

### Pattern 2: func(ctx *request.Context) (data, error)
### Returns data - framework handles response formatting
GET {{baseUrl}}/api/v2/patterns/products/1/detail

### Pattern 3: func(ctx *request.Context, param any) error
### Auto-bind parameters from request + manual response
GET {{baseUrl}}/api/v2/patterns/products/1

### Pattern 4: func(ctx *request.Context, param any) (data, error)
### Auto-bind parameters + return data
GET {{baseUrl}}/api/v2/patterns/products/search?q=lap

### Pattern 4: with price filter
GET {{baseUrl}}/api/v2/patterns/products/search?q=&min_price=50&max_price=100

### Pattern 5: func(param any) error
### Pure business logic - no HTTP context
POST {{baseUrl}}/api/v2/patterns/products
Content-Type: application/json

{
  "name": "Monitor",
  "price": 299.99
}

### Pattern 5: Validation test (should fail)
POST {{baseUrl}}/api/v2/patterns/products
Content-Type: application/json

{
  "name": "Monitor",
  "price": -10
}

### Pattern 6: func(param any) (data, error)
### Pure business logic with return value
PUT {{baseUrl}}/api/v2/patterns/products/1
Content-Type: application/json

{
  "name": "Laptop Updated",
  "price": 1099.99
}

### Pattern 6: Update non-existent product (should fail)
PUT {{baseUrl}}/api/v2/patterns/products/999
Content-Type: application/json

{
  "name": "Non-existent",
  "price": 999.99
}

### Pattern 7: func(w http.ResponseWriter, r *http.Request)
### Raw HTTP handler - lowest level control
DELETE {{baseUrl}}/api/v2/patterns/products/3

### Pattern 7: Delete non-existent product (should fail)
DELETE {{baseUrl}}/api/v2/patterns/products/999

### ============================================================================
### COMPARISON TEST - Same operation across all three routers
### ============================================================================

### Create user - Manual Router
POST {{baseUrl}}/api/v1/manual/users
Content-Type: application/json

{
  "name": "Test User Manual",
  "email": "test.manual@example.com"
}

### Create user - Service Router
POST {{baseUrl}}/api/v1/auto/users
Content-Type: application/json

{
  "name": "Test User Auto",
  "email": "test.auto@example.com"
}

### List users - Manual Router (should see new user)
GET {{baseUrl}}/api/v1/manual/users

### List users - Service Router (should see new user)
GET {{baseUrl}}/api/v1/auto/users

### ============================================================================
### END OF TESTS
### ============================================================================
