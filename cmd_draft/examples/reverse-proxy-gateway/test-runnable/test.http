### ============================================================================
### Lokstra Reverse Proxy Gateway - Test Requests
### ============================================================================
### 
### Architecture:
###   - App1 (port 9090): User Service Backend
###   - App2 (port 9091): Product Service Backend
###   - App3 (port 8080): API Gateway (routes to App1 & App2)
###
### Reverse Proxy Routing:
###   - /users/*    → http://localhost:9090/*
###   - /products/* → http://localhost:9091/*
### ============================================================================

### ----------------------------------------------------------------------------
### Direct Access to Backend Services (without gateway)
### ----------------------------------------------------------------------------

### [Direct] App1 - Get all users
GET http://localhost:9090/users HTTP/1.1

###

### [Direct] App1 - Get user by ID
GET http://localhost:9090/users/1 HTTP/1.1

###

### [Direct] App2 - Get all products
GET http://localhost:9091/products HTTP/1.1

###

### [Direct] App2 - Get product by ID
GET http://localhost:9091/products/101 HTTP/1.1

###

### ----------------------------------------------------------------------------
### API Gateway Access (through reverse proxy)
### ----------------------------------------------------------------------------

### [Gateway] Get all users (proxied to App1)
# Should return users with "source": "App1 (port 9090)"
GET http://localhost:8080/users HTTP/1.1

###

### [Gateway] Get user by ID (proxied to App1)
GET http://localhost:8080/users/1 HTTP/1.1

###

### [Gateway] Get specific user
GET http://localhost:8080/users/2 HTTP/1.1

###

### [Gateway] Create new user (proxied to App1)
POST http://localhost:8080/users HTTP/1.1
Content-Type: application/json

{
  "name": "David",
  "email": "david@example.com"
}

###

### [Gateway] Update user (proxied to App1)
PUT http://localhost:8080/users/1 HTTP/1.1
Content-Type: application/json

{
  "name": "Alice Updated",
  "email": "alice.updated@example.com"
}

###

### [Gateway] Delete user (proxied to App1)
DELETE http://localhost:8080/users/1 HTTP/1.1

###

### ----------------------------------------------------------------------------
### Product Service through Gateway (proxied to App2)
### ----------------------------------------------------------------------------

### [Gateway] Get all products (proxied to App2)
# Should return products with "source": "App2 (port 9091)"
GET http://localhost:8080/products HTTP/1.1

###

### [Gateway] Get product by ID (proxied to App2)
GET http://localhost:8080/products/101 HTTP/1.1

###

### [Gateway] Get specific product
GET http://localhost:8080/products/102 HTTP/1.1

###

### [Gateway] Create new product (proxied to App2)
POST http://localhost:8080/products HTTP/1.1
Content-Type: application/json

{
  "name": "Monitor",
  "price": 350,
  "stock": 80
}

###

### [Gateway] Update product (proxied to App2)
PUT http://localhost:8080/products/101 HTTP/1.1
Content-Type: application/json

{
  "name": "Gaming Laptop",
  "price": 1500,
  "stock": 30
}

###

### [Gateway] Delete product (proxied to App2)
DELETE http://localhost:8080/products/101 HTTP/1.1

###

### ----------------------------------------------------------------------------
### Test 404 and Error Cases
### ----------------------------------------------------------------------------

### [Gateway] Non-existent user
GET http://localhost:8080/users/999 HTTP/1.1

###

### [Gateway] Non-existent product
GET http://localhost:8080/products/999 HTTP/1.1

###

### [Gateway] Invalid route (should return 404)
GET http://localhost:8080/invalid HTTP/1.1

###

### ----------------------------------------------------------------------------
### Verify Strip Prefix Behavior
### ----------------------------------------------------------------------------
### 
### With strip-prefix: true
###   Request:  GET /users/1
###   Proxied:  GET http://localhost:9090/1  (prefix stripped)
###   
### The backend sees the request WITHOUT the /users prefix
### This is verified by the response which should work correctly
### ----------------------------------------------------------------------------

### [Verification] Users endpoint with various paths
GET http://localhost:8080/users HTTP/1.1

###

GET http://localhost:8080/users/1 HTTP/1.1

###

GET http://localhost:8080/users/2 HTTP/1.1

###

### [Verification] Products endpoint with various paths
GET http://localhost:8080/products HTTP/1.1

###

GET http://localhost:8080/products/101 HTTP/1.1

###

GET http://localhost:8080/products/102 HTTP/1.1

###

### ----------------------------------------------------------------------------
### Performance Test (multiple rapid requests)
### ----------------------------------------------------------------------------

### Multiple user requests
GET http://localhost:8080/users/1 HTTP/1.1

###

GET http://localhost:8080/users/2 HTTP/1.1

###

GET http://localhost:8080/users/3 HTTP/1.1

###

### Multiple product requests
GET http://localhost:8080/products/101 HTTP/1.1

###

GET http://localhost:8080/products/102 HTTP/1.1

###

GET http://localhost:8080/products/103 HTTP/1.1

###

### ----------------------------------------------------------------------------
### Summary of Expected Results
### ----------------------------------------------------------------------------
###
### ✅ Direct access to App1/App2 should work
### ✅ Gateway access should proxy correctly
### ✅ All responses should include "source" field indicating origin
### ✅ CRUD operations (GET, POST, PUT, DELETE) should work
### ✅ 404 for invalid routes
### ✅ Strip prefix should work (backend sees paths without /users or /products)
###
### ----------------------------------------------------------------------------
