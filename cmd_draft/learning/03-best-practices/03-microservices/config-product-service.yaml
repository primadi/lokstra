# Microservices Configuration - Product Service
# Each service runs independently in separate processes/containers
# Full service isolation and independent scaling

configs:
  - name: server-name
    value: ${SERVER_NAME:product-service}
  
  - name: deployment-strategy
    value: microservice

# Only services needed by this microservice
services:
  - name: db-service
    type: db
    config:
      host: ${DB_HOST:localhost}
      port: ${DB_PORT:5432}
      database: ${DB_NAME:products}

  - name: cache-service
    type: cache
    config:
      host: ${CACHE_HOST:localhost}
      port: ${CACHE_PORT:6379}

  - name: product-service
    type: product
    config: {}

# Product microservice configuration
servers:
  - name: product-service
    baseUrl: ${PRODUCT_SERVICE_URL:http://localhost}
    deployment-id: microservice
    apps:
      - addr: ":8080"
        routers: [product-api, health-api]

# Benefits:
# ✅ Independent deployment
# ✅ Independent scaling
# ✅ Technology diversity (different languages per service)
# ✅ Team autonomy
# ✅ Fault isolation
#
# Challenges:
# ❌ More complex infrastructure
# ❌ Network latency between services
# ❌ Distributed tracing needed
# ❌ More operational overhead
#
# Use when:
# - Large team (>20 developers)
# - High traffic requiring independent scaling
# - Different services have different SLAs
# - Need to deploy services independently
#
# Communication:
# - Same service: Local (httptest)
# - Different services: HTTP to baseUrl + addr
#   Example: order-service calls product-service
#   → HTTP to http://product-service:8080
