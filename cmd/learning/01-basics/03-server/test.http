### Server Example - Testing Multiple Apps and App Merging
### Run the server: go run main.go

@publicUrl = http://localhost:8080
@adminUrl = http://localhost:8081

### ============================================
### PUBLIC API (Port 8080)
### This listener serves 3 merged routers:
### - users-router, products-router, health-router (from public-api)
### - internal-router (from internal-api - auto-merged!)
### ============================================

### Get all users
GET {{publicUrl}}/api/users

### Get specific user
GET {{publicUrl}}/api/users/123

### Get all products
GET {{publicUrl}}/api/products

### Health check on public API
# This health endpoint comes from the reusable health-router
GET {{publicUrl}}/health

### Internal config endpoint
# This shows that internal-api was merged into port 8080
GET {{publicUrl}}/internal/config

### ============================================
### ADMIN API (Port 8081)
### This is a separate listener for security
### Notice the same /health endpoint works here too!
### ============================================

### Get admin statistics
GET {{adminUrl}}/admin/stats

### Get admin users list
GET {{adminUrl}}/admin/users

### Health check on admin API
# This is the SAME health-router instance used on port 8080!
# Demonstrates router reusability across multiple apps
GET {{adminUrl}}/health

### ============================================
### Key Concepts Demonstrated:
### 1. App Merging: internal-api and public-api both use :8080, so they merge
### 2. Router Reusability: health-router is used in both publicApp and adminApp
### 3. Separate Listeners: adminApp uses :8081 for security isolation
### 4. Server Management: One server manages multiple apps with centralized shutdown
### ============================================
