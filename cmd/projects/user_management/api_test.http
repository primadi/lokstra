### User Management API Tests
### Base URL
@baseUrl = http://localhost:8081
@apiPath = /api/v1
@contentType = application/json

### ========================================
### 0. HEALTH CHECK & SYSTEM INFO
### ========================================

### Check Service Health
GET {{baseUrl}}/health

### ========================================
### 1. CREATE NEW USER
### ========================================

### Create User - Valid Data
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "johndoe",
  "email": "john.doe@example.com",
  "password": "SecurePassword123!",
  "full_name": "John Doe"
}

### Create User - Missing Required Fields (should fail)
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "incomplete",
  "email": "incomplete@example.com"
}

### Create User - Invalid Email (should fail)
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "baduser",
  "email": "invalid-email",
  "password": "password123"
}

### ========================================
### 2. UPDATE USER
### ========================================

### Update User - Full Update
PUT {{baseUrl}}{{apiPath}}/users/id/1
Content-Type: {{contentType}}

{
  "username": "johndoe_updated",
  "email": "john.updated@example.com",
  "full_name": "John Doe Updated",
  "is_active": true
}

### Update User - Partial Update
PUT {{baseUrl}}{{apiPath}}/users/id/1
Content-Type: {{contentType}}

{
  "full_name": "John Smith",
  "is_active": false
}

### Update User - Invalid ID (should fail)
PUT {{baseUrl}}{{apiPath}}/users/id/invalid-id
Content-Type: {{contentType}}

{
  "username": "test"
}

### Update User - Non-existent ID (should fail)
PUT {{baseUrl}}{{apiPath}}/users/id/99999
Content-Type: {{contentType}}

{
  "username": "nonexistent"
}

### ========================================
### 3. LIST USERS (Pagination)
### ========================================

### List Users - Default Pagination
GET {{baseUrl}}{{apiPath}}/users

### List Users - Custom Page and Size
GET {{baseUrl}}{{apiPath}}/users?page=1&page_size=5

### List Users - Large Page Size (should be limited to 100)
GET {{baseUrl}}{{apiPath}}/users?page=1&page_size=200

### List Users - Zero/Negative Values (should use defaults)
GET {{baseUrl}}{{apiPath}}/users?page=0&page_size=-5

### List Users - With Filters
GET {{baseUrl}}{{apiPath}}/users?page=1&page_size=10&filter[username]=john&filter[is_active]=true

### List Users - Search by Email
GET {{baseUrl}}{{apiPath}}/users?page=1&page_size=10&filter[email]=@example.com

### List Users - Multiple Filters
GET {{baseUrl}}{{apiPath}}/users?page=2&page_size=5&filter[is_active]=true&filter[created_after]=2024-01-01

### ========================================
### 4. DELETE USER
### ========================================

### Delete User - Valid ID
DELETE {{baseUrl}}{{apiPath}}/users/id/1

### Delete User - Invalid ID (should fail)
DELETE {{baseUrl}}{{apiPath}}/users/id/invalid-id

### Delete User - Non-existent ID (should fail)
DELETE {{baseUrl}}{{apiPath}}/users/id/99999

### Delete User - Already Deleted (should fail)
DELETE {{baseUrl}}{{apiPath}}/users/id/1

### ========================================
### 5. EDGE CASES & ERROR HANDLING
### ========================================

### Create User - Duplicate Username (should fail)
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "johndoe",
  "email": "another@example.com",
  "password": "password123"
}

### Create User - Duplicate Email (should fail)
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "anotherjohn",
  "email": "john.doe@example.com",
  "password": "password123"
}

### Create User - Weak Password (should fail if validation exists)
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "weakpass",
  "email": "weak@example.com",
  "password": "123"
}

### Update User - Try to Set Duplicate Username (should fail)
PUT {{baseUrl}}{{apiPath}}/users/2
Content-Type: {{contentType}}

{
  "username": "johndoe"
}

### ========================================
### 6. BATCH OPERATIONS FOR TESTING
### ========================================

### Create Multiple Users for Testing
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "alice",
  "email": "alice@example.com",
  "password": "AlicePass123!",
  "full_name": "Alice Johnson"
}

###
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "bob",
  "email": "bob@example.com",
  "password": "BobPass123!",
  "full_name": "Bob Wilson"
}

###
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "charlie",
  "email": "charlie@example.com",
  "password": "CharliePass123!",
  "full_name": "Charlie Brown"
}

###
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "diana",
  "email": "diana@example.com",
  "password": "DianaPass123!",
  "full_name": "Diana Prince"
}

### ========================================
### 7. PERFORMANCE & LOAD TESTING
### ========================================

### List Large Dataset (test pagination performance)
GET {{baseUrl}}{{apiPath}}/users?page=1&page_size=100

### List with Complex Filters (test query performance)
GET {{baseUrl}}{{apiPath}}/users?page=1&page_size=50&filter[created_after]=2024-01-01&filter[is_active]=true&filter[username_contains]=test

### ========================================
### 8. RESPONSE FORMAT VALIDATION
### ========================================

### Test Pagination Response Format
GET {{baseUrl}}{{apiPath}}/users?page=2&page_size=3

### Expected Response Format:
### {
###   "data": [
###     {
###       "id": "string",
###       "username": "string",
###       "email": "string", 
###       "full_name": "string",
###       "is_active": boolean,
###       "created_at": "datetime",
###       "updated_at": "datetime"
###     }
###   ],
###   "pagination": {
###     "page": 2,
###     "page_size": 3,
###     "total": 100,
###     "total_pages": 34,
###     "has_next": true,
###     "has_prev": true
###   },
###   "filters": {
###     "applied": {}
###   }
### }

### ========================================
### 9. AUTHENTICATION TESTS (if implemented)
### ========================================

### Test without authentication (should fail if auth required)
GET {{baseUrl}}{{apiPath}}/users
Authorization: Bearer invalid-token

### Test with valid authentication
# GET {{baseUrl}}{{apiPath}}/users
# Authorization: Bearer {{validToken}}

### ========================================
### 10. CONTENT-TYPE TESTS
### ========================================

### Create User - Invalid Content-Type (should fail)
POST {{baseUrl}}{{apiPath}}/users
Content-Type: text/plain

{
  "username": "test"
}

### Create User - Missing Content-Type (should fail)
POST {{baseUrl}}{{apiPath}}/users

{
  "username": "test"
}

### ========================================
### 11. SPECIAL CHARACTERS & UNICODE
### ========================================

### Create User - Unicode Characters
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "用户测试",
  "email": "unicode@测试.com",
  "password": "UnicodePass123!",
  "full_name": "用户 测试"
}

### Create User - Special Characters in Username
POST {{baseUrl}}{{apiPath}}/users
Content-Type: {{contentType}}

{
  "username": "user.with-special_chars",
  "email": "special@example.com",
  "password": "SpecialPass123!",
  "full_name": "Special Characters User"
}

### ========================================
### 13. AUTHENTICATION ENDPOINTS (Placeholder)
### ========================================

### Login
POST {{baseUrl}}{{apiPath}}/auth/login
Content-Type: {{contentType}}

{
  "username": "johndoe",
  "password": "SecurePassword123!"
}

### Logout
POST {{baseUrl}}{{apiPath}}/auth/logout
Content-Type: {{contentType}}

{
  "token": "sample-jwt-token"
}

### Refresh Token
POST {{baseUrl}}{{apiPath}}/auth/refresh
Content-Type: {{contentType}}

{
  "refresh_token": "sample-refresh-token"
}

### ========================================
### 14. ADMIN ENDPOINTS (Placeholder)
### ========================================

### Admin - Get User Statistics
GET {{baseUrl}}{{apiPath}}/admin/users/stats

### Admin - Activate User
POST {{baseUrl}}{{apiPath}}/admin/users/id/1/activate

### Admin - Deactivate User
POST {{baseUrl}}{{apiPath}}/admin/users/id/1/deactivate

### ========================================
### 15. GET USER BY USERNAME & ID
### ========================================

### Get User by ID - Valid User (should return user data)
GET {{baseUrl}}{{apiPath}}/users/id/1

### Get User by ID - Non-existent (should return 404)
GET {{baseUrl}}{{apiPath}}/users/id/99999

### Get User by ID - Invalid ID format
GET {{baseUrl}}{{apiPath}}/users/id/invalid-id

### Get User by Username - Valid User (should return user data)
GET {{baseUrl}}{{apiPath}}/users/by-name/johndoe

### Get User by Username - Non-existent (should return 404)
GET {{baseUrl}}{{apiPath}}/users/by-name/nonexistent

### Get User by Username - Special Characters
GET {{baseUrl}}{{apiPath}}/users/by-name/user.with-special_chars

### Get User by Username - Unicode Characters
GET {{baseUrl}}{{apiPath}}/users/by-name/用户测试

### Get User by Username - Empty Username (should fail)
GET {{baseUrl}}{{apiPath}}/users/by-name/

### Get User by Username - Case Sensitivity Test
GET {{baseUrl}}{{apiPath}}/users/by-name/JohnDoe

### Get User by Username - With Spaces (URL encoded)
GET {{baseUrl}}{{apiPath}}/users/by-name/user%20with%20spaces

### Expected Response Format for Valid User:
### {
###   "id": "user-id",
###   "username": "johndoe",
###   "email": "john.doe@example.com",
###   "full_name": "John Doe",
###   "is_active": true,
###   "created_at": "2025-01-01T00:00:00Z",
###   "updated_at": "2025-01-01T00:00:00Z"
### }

### Expected Error Response for Non-existent User:
### {
###   "error": {
###     "code": "NOT_FOUND",
###     "message": "User not found with username: nonexistent"
###   }
### }

### ========================================
### 12. CLEANUP (Run after testing)
### ========================================

### Delete Test Users (run these to clean up)
# DELETE {{baseUrl}}{{apiPath}}/users/id/1
# DELETE {{baseUrl}}{{apiPath}}/users/id/2  
# DELETE {{baseUrl}}{{apiPath}}/users/id/3
# DELETE {{baseUrl}}{{apiPath}}/users/id/4
# DELETE {{baseUrl}}{{apiPath}}/users/id/5
