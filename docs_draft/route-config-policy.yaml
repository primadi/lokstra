# Route Configuration Policy Example

# Route Configuration Policy Examples

# ❌ WRONG APPROACH: Trying to modify path/method of existing routes
# routers:
#   - name: api-router
#     routes:
#       - name: health-check
#         path: /api/health-new  # ❌ Cannot modify path via config
#         method: POST           # ❌ Cannot modify method via config
        
# ✅ CORRECT APPROACH: Only adding middleware to existing routes  
routers:
  - name: api-router
    use: [cors, logger]  # Add middleware to all routes in router
    routes:
      # Reference existing route by name and add middleware
      - name: health-check
        path: /health      # ✅ Optional: for reference/validation
        method: GET        # ✅ Optional: for reference/validation  
        use: [rate-limit]  # ✅ Add middleware to this specific route
        
      # Reference existing route without specifying path (uses path from code)
      - name: user-profile
        # path: ""         # ✅ Empty = use existing path from code
        use: [auth, validate]  # ✅ Add middleware to existing route
        
      # Disable an existing route
      - name: admin-dangerous
        enable: false      # ✅ Can disable routes via config

# ✅ If you need new paths/methods, register them in code first:
# 
# In main.go:
# router.GET("/api/health", healthHandler)      # Original route
# router.GET("/api/health-new", healthHandler)  # New route - register in code
# router.POST("/api/health", healthHandler)     # New method - register in code
#
# Then in config.yaml:
# routers:
#   - name: api-router  
#     routes:
#       - name: health-get
#         use: [logger]
#       - name: health-post
#         use: [logger, auth]
#       - name: health-new
#         use: [logger, cache]